name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]


jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
          cache-dependency-path: |
            app/requirements.txt
            app/requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt -r app/requirements-dev.txt

      - name: Run tests
        run: |
          pytest -q

      - name: Lint (ruff)
        run: |
          ruff check .

      - name: Format (black)
        run: |
          black --check .
          
  integration-test:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and start services with docker-compose
        run: |
          docker compose up --build -d

      - name: Define wait_health.sh
        run: |
          cat > wait_healthy.sh <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          svc="$1" 
          max="${2:-20}"
          delay="${3:-3}"
          cid="$(docker compose ps -q "$svc")"
          if [ -z "$cid" ]; then
            echo "No container for service $svc"; exit 1
          fi
          for i in $(seq 1 "${max:-10}"); do
            hstatus="$(docker inspect --format='{{.State.Health.Status}}' "$cid" 2>/dev/null || echo no-health")
            echo "[$svc] attempt $i: $hstatus"
            if [ "$hstatus" = "healthy" ]; then exit 0; fi
            sleep "$delay"
          done
          echo "[$svc] did not become healthy"
          exit 1
          EOS
          chmod +x wait_healthy.sh
          
      - name: Wait for services to be healthy
        run: |
          ./wait_healthy.sh db 20 3
          ./wait_healthy.sh app 20 3
          ./wait_healthy.sh prometheus 20 3
          ./wait_healthy.sh grafana 20 3

      - name: Database backup script test
        run: |
          ./backup.sh
          test -n "$(find backups -type f -name 'backup_*' -mmin -5)"
      
      - name: Verify Prometheus scrapes Flask
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:9090/api/v1/targets | grep -q '"health":"up"'; then
              exit
            fi
            sleep 3
          done
          exit 1

      - name: Verify Grafana sees Prometheus
        env:
          GF_USER: admin
          GF_PASS: admin
        run: |
          for i in {1..20}; do
            if curl -s -u "${GF_USER}:${GF_PASS}" http://localhost:3000/api/datasources | grep -q '"name":"Prometheus"'; then
              exit 0
            fi
            sleep 3
          done
          exit 1

      - name: Tear down compose stack
        if: always()
        run: |
          docker compose down -v

  build-and-scan:
    needs: test-and-lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  
    outputs:
      image: ${{ steps.set-image.outputs.IMAGE }}
    steps:
      - uses: actions/checkout@v4

      - id: set-image
        run: |
          IMAGE="ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.set-image.outputs.IMAGE }}:latest -t ${{ steps.set-image.outputs.image }}:${{ github.sha }} app

      - name: Scan image with Trivy (fail on HIGHT/CRITICAL)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.set-image.outputs.IMAGE }}:latest
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          output: trivy-report.sarif
          format: sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-report.sarif 

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ steps.set-image.outputs.IMAGE }}:latest
          docker push ${{ steps.set-image.outputs.IMAGE }}:${{ github.sha }}

  deploy:
    needs: 
      - build-and-scan 
      - integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Deploy with Docker Compose
        run: |
          echo "Deploying ${{ needs.build-and-scan.outputs.IMAGE }}:latest"
          docker pull ${{ needs.build-and-scan.outputs.IMAGE }}:latest
          docker compose -f docker-compose.yml up -d
