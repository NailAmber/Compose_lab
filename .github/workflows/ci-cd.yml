name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install -r app/requirements-dev.txt
      - name: Run tests
        run: |
          pytest -q
      - name: Lint (ruff)
        run: |
          ruff check app
      - name: Format (black)
        run: |
          black --check app
          
  integration-test:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and start services with docker-compose
        run: |
          docker compose up --build -d
      - name: Wait for app to be healthy
        run: |
          for i in {1..10}; do
            docker inspect --format='{{json .State.Health.Status}}' app | grep -q healthy && break
            sleep 3
          done
      - name: Tear down compose stack
        if: always()
        run: |
          docker compose down

  build-and-scan:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
      - name: Set image name
        run: |
          IMAGE="ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} app
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE }}:latest
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push Docker image
        run: |
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}

  deploy:
    needs: 
      - build-and-scan 
      - integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Deploy with Docker Compose
        run: |
          echo "Pulling image ${{ env. IMAGE }}"
          docker pull ${{ env.IMAGE }}:latest
          docker compose -f docker-compose.yml up -d
