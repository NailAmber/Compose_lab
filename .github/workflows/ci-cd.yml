name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install -r app/requirements-dev.txt

      - name: Run tests
        run: |
          pytest -q

      - name: Lint (ruff)
        run: |
          ruff check app
          ruff check tests

      - name: Format (black)
        run: |
          black --check app
          black --check tests
          
  integration-test:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and start services with docker-compose
        run: |
          docker compose up --build -d
      - name: Wait for Postgres to be healthy
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' docker_lab-db-1 2>/dev/null || echo "no-health")
            echo "Attempt $i: $STATUS"
            if [ "$STATUS" = "healthy" ]; then
              echo "Postgres is healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Postgres did not become healthy after 10 attempts"
          exit 1
      
      - name: Database backup script test
        run: |
          ./backup.sh
          ls | grep -q backups
          ls backups | grep -q backup

      - name: Wait for Flask-app to be healthy
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' docker_lab-app-1 2>/dev/null || echo "no-health")
            echo "Attempt $i: $STATUS"
            if [ "$STATUS" = "healthy" ]; then
              echo "Flask-app is healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Flask-app did not become healthy after 10 attempts"
          exit 1
      - name: Wait for Prometheus to be healthy
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' docker_lab-prometheus-1 2>/dev/null || echo "no-health")
            echo "Attempt $i: $STATUS"
            if [ "$STATUS" = "healthy" ]; then
              echo "Prometheus is healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Prometheus did not become healthy after 10 attempts"
          exit 1

      - name: Verify Prometheus scrapes Flask
        run: |
          for i in {1..10}; do 
            if curl -s http://localhost:9090/api/v1/targets | grep -q '"health":"up"'; then
              echo "Prometheus scrapes Flask"
              exit 0
            fi
            sleep 3
          done
          echo "Prometheus does not scrape Flask"
          exit 1

      - name: Wait for Grafana to be healthy
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' docker_lab-grafana-1 2>/dev/null || echo "no-health")
            echo "Attempt $i: $STATUS"
            if [ "$STATUS" = "healthy" ]; then
              echo "Grafana is healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Grafana did not become healthy after 10 attempts"
          exit 1

      - name: Verify Grafana sees Prometheus
        run: |
          for i in {1..10}; do
            if curl -s -u admin:admin http://localhost:3000/api/datasources | grep -q "Prometheus"; then
              echo "Grafana has Prometheus datasource"
              exit 0
            fi
            sleep 3
          done
          echo "Grafana does not have Prometheus datasource"
          exit 1

      - name: Tear down compose stack
        if: always()
        run: |
          docker compose down

  build-and-scan:
    needs: test-and-lint
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.IMAGE }}
    steps:
      - id: set-image
        run: |
          IMAGE="ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.set-image.outputs.IMAGE }}:latest -t ${{ steps.set-image.outputs.image }}:${{ github.sha }} app

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.set-image.outputs.IMAGE }}:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ steps.set-image.outputs.IMAGE }}:latest
          docker push ${{ steps.set-image.outputs.IMAGE }}:${{ github.sha }}

  deploy:
    needs: 
      - build-and-scan 
      - integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Deploy with Docker Compose
        run: |
          echo "Deploying ${{ needs.build-and-scan.outputs.IMAGE }}:latest"
          docker pull ${{ needs.build-and-scan.outputs.IMAGE }}:latest
          docker compose -f docker-compose.yml up -d
