services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: testdb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend_net
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 3 

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8081:8000"
    depends_on:
      - db
    networks:
      - backend_net
    environment:
      - prometheus_multiproc_dir=/tmp/metrics
    volumes:
      - metrics_data:/tmp/metrics
  
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - app
      - node-exporter
    networks:
      - backend_net
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend_net
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  node-exporter:
    image: prom/node-exporter:latest
    restart: always
    ports:
      - "9100:9100"
    networks:
      - backend_net


volumes:
  db_data:
  grafana_data:
  prometheus_data:
  metrics_data:

networks:
  backend_net:

